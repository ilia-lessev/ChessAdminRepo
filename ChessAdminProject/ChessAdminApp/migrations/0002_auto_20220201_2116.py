# Generated by Django 3.2.7 on 2022-02-01 19:16

from django.db import migrations, models
import django.db.models.expressions


class Migration(migrations.Migration):

    dependencies = [
        ('ChessAdminApp', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=25, unique=True)),
                ('text', models.CharField(max_length=4000)),
            ],
        ),
        migrations.CreateModel(
            name='RankingEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RankingEventData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('name', models.CharField(max_length=50)),
                ('points', models.IntegerField()),
                ('rank', models.IntegerField()),
                ('winratio', models.DecimalField(decimal_places=2, max_digits=5)),
                ('match_count', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Ranking events data',
            },
        ),
        migrations.AlterModelOptions(
            name='match',
            options={'verbose_name_plural': 'Matches'},
        ),
        migrations.AddConstraint(
            model_name='match',
            constraint=models.CheckConstraint(check=models.Q(('player_one__isnull', False), ('player_two__isnull', False), models.Q(('player_one', django.db.models.expressions.F('player_two')), _negated=True)), name='1_two_players_required'),
        ),
        migrations.AddConstraint(
            model_name='match',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('match_result__isnull', True), ('status', 'SCHEDULED')), models.Q(('match_result__isnull', True), ('status', 'PLAYING')), models.Q(('match_result__isnull', False), ('status', 'COMPLETED')), models.Q(('match_result__isnull', True), ('status', 'CANCELED')), _connector='OR'), name='2_complete_match_result'),
        ),
        migrations.AddConstraint(
            model_name='match',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('match_result__isnull', True), ('winner__isnull', True)), models.Q(('match_result', 'DRAW'), ('match_result__isnull', False), ('winner__isnull', True)), models.Q(('match_result', 'WIN'), ('match_result__isnull', False), ('winner__isnull', False)), _connector='OR'), name='3_winner_on_complete'),
        ),
        migrations.AddConstraint(
            model_name='match',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('match_result', 'DRAW'), ('winner__isnull', True)), models.Q(('match_result', 'WIN'), ('winner', django.db.models.expressions.F('player_one'))), models.Q(('match_result', 'WIN'), ('winner', django.db.models.expressions.F('player_two'))), _connector='OR'), name='4_winner_is_in_match'),
        ),
        migrations.AddConstraint(
            model_name='match',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('player_one_entry_ranking__isnull', True), ('player_two_entry_ranking__isnull', True), ('status', 'SCHEDULED')), models.Q(('player_one_entry_ranking__isnull', False), ('player_two_entry_ranking__isnull', False), ('status', 'PLAYING')), models.Q(('player_one_entry_ranking__isnull', False), ('player_two_entry_ranking__isnull', False), ('status', 'COMPLETED')), ('status', 'CANCELED'), _connector='OR'), name='5_playing_entry_ranks'),
        ),
        migrations.AddConstraint(
            model_name='match',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('match_result__isnull', True), ('player_one_ranking_change__isnull', True), ('player_two_ranking_change__isnull', True)), models.Q(('match_result__isnull', False), ('player_one_ranking_change__isnull', False), ('player_two_ranking_change__isnull', False)), _connector='OR'), name='6_complete_match_ranking'),
        ),
    ]
